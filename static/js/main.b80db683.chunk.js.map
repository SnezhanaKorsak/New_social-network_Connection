{"version":3,"sources":["api/api.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfilePosts/AllPosts/ProfileAllPost.module.css","utils/helper-utils.ts","redux/friendsReducer.ts","components/Messages/Messages.module.css","components/Header/Header.module.css","assets/images/ball-triangle.svg","common/Preloader/Preloader.tsx","components/Profile/ProfileCover/ProfileCover.module.css","components/Profile/ProfilePosts/NewPost/ProfileNewPost.module.css","redux/paginationReducer.ts","redux/authReducer.ts","redux/appReducer.ts","redux/profileReducer.ts","redux/messageReducer.ts","redux/sideBarReducer.ts","redux/redux-store.tsx","components/Messages/UserItem/UserItem.tsx","components/Messages/DialogItem/DialogItem.tsx","components/Messages/Messages.tsx","hoc/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx","assets/images/nouser.png","assets/images/myAvatar.jpg","components/Profile/ProfileCover/ProfileCover.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePosts/NewPost/ProfileNewPost.tsx","components/Profile/ProfilePosts/AllPosts/Post.tsx","components/Profile/ProfilePosts/AllPosts/ProfileAllPost.tsx","components/Profile/ProfilePosts/ProfilePosts.tsx","components/Profile/ProfilePosts/NewPost/ProfilePostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/NavBar/Navbar.tsx","components/NavBar/NavbarContainer.tsx","App.tsx","components/NavBar/Navbar.module.css","components/Messages/UserItem/UserItem.module.css","components/Messages/DialogItem/DialogItem.module.css","components/Profile/Profile.module.css","common/Preloader/Preloader.module.css","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","UserAPI","getUsers","currentPage","pageLimit","get","then","response","data","followUser","userId","post","unfollowUser","delete","AuthAPI","me","logIn","email","password","rememberMe","logout","ProfileAPI","getUsersProfile","getUserStatus","updateStatus","status","put","module","exports","followUnfollowFlow","dispatch","apiMethod","action","a","toggleIsFollowingProgress","resultCode","initialState","friends","isFetching","followingInProgress","friendsReducer","state","type","map","f","id","friendId","followed","filter","follow","unfollow","setFriends","toggleIsFetching","followTC","bind","unfollowTC","Preloader","className","s","loading","src","loadingGif","alt","totalCount","pageNeighbours","paginationReducer","page","getUserTC","items","login","isAuth","setAuthData","payload","getAuthDataTC","initialized","ADD_POST","UPDATE_NEW_POST","posts","message","likeCount","newPostText","profile","setUserProfile","setUserStatus","ADD_MESSAGE","UPDATE_NEW_MESSAGE","users","name","dialogs","newMessageText","rootReducer","combineReducers","profilePage","newPost","Date","getTime","postText","newText","messagePage","newMessage","messageText","sideBar","friendsPage","pagination","auth","app","store","createStore","applyMiddleware","thunk","window","UserItem","props","userItem","to","DialogItem","dialogItem","AddNewMessageForm","addMessage","addMessageForm","initialValues","onSubmit","values","setSubmitting","isSubmitting","textarea","placeholder","autoComplete","disabled","mapStateToProps","withAuthRedirect","Component","connect","restProps","PATH","LOGIN","compose","onMessageChange","usersElement","u","dialogElement","d","messages","ProfileCover","userAvatar","cover","avatar","myAvatar","findAvatar","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","onStatusChange","e","currentTarget","value","this","onBlur","onChange","autoFocus","onDoubleClick","React","ProfileInfo","info","infoHeader","infoBlock","basicItem","order","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","vk","instagram","github","ProfileNewPost","memo","createPosts","onPostChange","onClick","addPost","Post","item","postBlock","postItem","likecount","ProfileAllPost","postElement","p","allPosts","ProfilePostContainer","addPostAC","onPostChangeAC","Profile","content","photos","small","ProfileContainer","match","params","getUserProfileTC","getUserStatusTC","updateStatusTC","withRouter","Header","logoutTC","header","logoText","loginContainer","button","HeaderContainer","Navbar","nav","PROFILE","activeClassName","active","MESSAGES","FRIENDS","MUSIC","VIDEO","NavbarContainer","FriendsContainer","lazy","Video","Music","App","initializeApp","fallback","path","exact","render","MessagesContainer","AppContainer","MainApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6IAAA,kHAKMA,EALN,OAKiBC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CACL,UAAW,0CAINC,EAAU,CACnBC,SADmB,WACuB,IAAjCC,EAAgC,uDAAlB,EAAGC,EAAe,uDAAH,EAClC,OAAOT,EAASU,IAAT,sBAA8CF,EAA9C,kBAAmEC,IAAaE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAErHC,WAJmB,WAIS,IAAjBC,EAAgB,uDAAP,MAChB,OAAOf,EAASgB,KAAT,kBAA0CD,GAAU,IAAIJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE7FI,aAPmB,WAOW,IAAjBF,EAAgB,uDAAP,MAClB,OAAOf,EAASkB,OAAT,kBAA4CH,IAAUJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGlFM,EAAU,CACnBC,GADmB,WAEf,OAAOpB,EAASU,IAAqB,YAAYC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE/EQ,MAJmB,SAIbC,EAAeC,GAAgD,IAA9BC,EAA6B,wDAChE,OAAOxB,EAASgB,KAA0C,cAAe,CAACM,QAAOC,WAAUC,gBAE/FC,OAPmB,WAQf,OAAOzB,EAASkB,OAAwB,iBAInCQ,EAAa,CACtBC,gBADsB,SACNZ,GACZ,OAAOf,EAASU,IAAiB,YAAcK,IAEnDa,cAJsB,SAIRb,GACV,OAAOf,EAASU,IAAY,mBAAqBK,IAErDc,aAPsB,SAOTC,GACT,OAAO9B,EAAS+B,IAAT,mBAAkD,CAACD,c,mBC3ClEE,EAAOC,QAAU,CAAC,KAAO,0BAA0B,WAAa,gCAAgC,UAAY,+BAA+B,UAAY,+BAA+B,MAAQ,6B,mBCA9LD,EAAOC,QAAU,CAAC,SAAW,iCAAiC,OAAS,+BAA+B,KAAO,6BAA6B,UAAY,kCAAkC,SAAW,mC,+RCGtLC,EAAkB,uCAAG,WAAOC,EAAoBpB,EACpBqB,EACAC,GAFP,SAAAC,EAAA,6DAG9BH,EAASI,GAA0B,EAAMxB,IAHX,SAKTqB,EAAUrB,GALD,OAOF,IAPE,OAOjByB,YACTL,EAASE,EAAOtB,IAEpBoB,EAASI,GAA0B,EAAOxB,IAVZ,2CAAH,4DCiBzB0B,EAAiC,CACnCC,QAAS,GACTC,YAAY,EACZC,oBAAqB,IAIZC,EAAiB,WAAqE,IAApEC,EAAmE,uDAA3DL,EAAcJ,EAA6C,uCAC9F,OAAQA,EAAOU,MACX,IAAK,SACD,OAAO,2BACAD,GADP,IACcJ,QAASI,EAAMJ,QAAQM,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOb,EAAOc,SAAhB,2BAChCF,GADgC,IAC7BG,UAAU,IAAQH,OAGvC,IAAK,WACD,OAAO,2BACAH,GADP,IACcJ,QAASI,EAAMJ,QAAQM,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOb,EAAOc,SAAhB,2BAChCF,GADgC,IAC7BG,UAAU,IAASH,OAGxC,IAAK,cACD,OAAO,2BAAIH,GAAX,IAAkBJ,QAAQ,YAAKL,EAAOK,WAE1C,IAAK,qBACD,OAAO,2BAAII,GAAX,IAAkBH,WAAYN,EAAOM,aAEzC,IAAK,+BACD,OAAON,EAAOM,WAAP,2BACGG,GADH,IACUF,oBAAoB,GAAD,mBAAME,EAAMF,qBAAZ,CAAiCP,EAAOtB,WADrE,2BAEG+B,GAFH,IAEUF,oBAAqBE,EAAMF,oBAAoBS,QAAO,SAAAH,GAAE,OAAIA,IAAOb,EAAOtB,YAG/F,QACI,OAAO+B,IAWNQ,EAAS,SAACH,GACnB,MAAO,CACHJ,KAAM,SACNI,aAIKI,EAAW,SAACJ,GACrB,MAAO,CACHJ,KAAM,WACNI,aAIKK,EAAa,SAACd,GACvB,MAAO,CACHK,KAAM,cACNL,YAGKe,EAAmB,SAACd,GAC7B,MAAO,CACHI,KAAM,qBACNJ,eAGKJ,EAA4B,SAACI,EAAqB5B,GAC3D,MAAO,CACHgC,KAAM,+BACNJ,aAAY5B,WAKP2C,EAAW,SAAC3C,GAAD,8CAAsC,WAAOoB,GAAP,eAAAG,EAAA,6DACpDF,EAAY9B,IAAQQ,WAAW6C,KAAKrD,KADgB,SAGpD4B,EAAmBC,EAAUpB,EAAQqB,EAAWkB,GAHI,2CAAtC,uDAMXM,EAAa,SAAC7C,GAAD,8CAAsC,WAAOoB,GAAP,eAAAG,EAAA,6DACtDF,EAAY9B,IAAQW,aAAa0C,KAAKrD,KADgB,SAGtD4B,EAAmBC,EAAUpB,EAAQqB,EAAWmB,GAHM,2CAAtC,wD,mBCzG1BvB,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,wBAAwB,QAAU,0BAA0B,eAAiB,iCAAiC,SAAW,6B,mBCAzLD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,MAAQ,sBAAsB,eAAiB,+BAA+B,OAAS,yB,4FCD9J,MAA0B,0C,OCI5B4B,EAAY,WACrB,OAAO,8BACH,qBAAKC,UAAWC,IAAEC,QAASC,IAAKC,EAAYC,IAAI,gB,mBCLxDnC,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,OAAS,+B,mBCA/DD,EAAOC,QAAU,CAAC,YAAc,oCAAoC,OAAS,iC,uJCYvEQ,EAAiC,CACnC2B,WAAY,EACZ3D,UAAW,EACX4D,eAAgB,EAChB7D,YAAa,GAGJ8D,EAAoB,WAA2E,IAA1ExB,EAAyE,uDAAjEL,EAAcJ,EAAmD,uCACvG,OAAQA,EAAOU,MACX,IAAK,mBACD,OAAO,2BAAID,GAAX,IAAkBtC,YAAa6B,EAAOkC,OAC1C,IAAK,kBACD,OAAO,2BAAIzB,GAAX,IAAkBsB,WAAY/B,EAAO+B,aAGzC,QACI,OAAOtB,IAwBN0B,EAAY,SAAChE,EAAqBC,GAAtB,8CAA8D,WAAO0B,GAAP,eAAAG,EAAA,6DACnFH,EAASsB,aAAiB,IAC1BtB,EARO,CACHY,KAAM,mBACNwB,KAMoB/D,IAF2D,SAI9DF,IAAQC,SAASC,EAAaC,GAJgC,OAI/EG,EAJ+E,OAMnFuB,EAASsB,aAAiB,IAC1BtB,EAASqB,YAAW5C,EAAS6D,QAC7BtC,EApBO,CACHY,KAAM,kBACNqB,WAkBmBxD,EAASwD,aARmD,2CAA9D,wD,4KC3CnB3B,EAAiC,CACnC1B,OAAQ,KACRO,MAAO,KACPoD,MAAO,KACPC,QAAQ,GAcCC,EAAc,SAAC7D,EAAuBO,EAAsBoD,EAAsBC,GAC3F,MAAO,CACH5B,KAAM,gBACN8B,QAAS,CAAC9D,SAAQO,QAAOoD,QAAOC,YAI3BG,EAAgB,yDAAwB,WAAO3C,GAAP,uBAAAG,EAAA,sEAChCnB,IAAQC,KADwB,OAGzB,KAFpBP,EAD6C,QAGxC2B,aAAmB,EACC3B,EAAKA,KAAzBqC,EADkB,EAClBA,GAAI5B,EADc,EACdA,MAAOoD,EADO,EACPA,MAChBvC,EAASyC,EAAY1B,EAAI5B,EAAOoD,GAAO,KALM,2CAAxB,uDC3BvBjC,EAAiC,CACnCsC,aAAa,G,uBC6BXC,EAAW,WACXC,EAAkB,kBAIlBxC,EAAgC,CAClCyC,MAAO,CACH,CACIhC,GAAI,EACJiC,QAAS,wFACTC,UAAW,IAEf,CACIlC,GAAI,EACJiC,QAAS,uFACTC,UAAW,KAGnBC,YAAa,GACbC,QAAS,KACTxD,OAAQ,IAmDCyD,EAAiB,SAACD,GAC3B,MAAO,CACHvC,KAvEiB,mBAwEjBuC,YAGKE,EAAgB,SAAC1D,GAC1B,MAAO,CACHiB,KA5EgB,kBA6EhBjB,WCvGF2D,EAAc,cACdC,EAAqB,qBAErBjD,EAAgC,CAClCkD,MAAO,CACH,CAACzC,GAAI,EAAG0C,KAAM,eACd,CAAC1C,GAAI,EAAG0C,KAAM,cACd,CAAC1C,GAAI,EAAG0C,KAAM,YACd,CAAC1C,GAAI,EAAG0C,KAAM,eAElBC,QAAS,CACL,CAAC3C,GAAI,EAAGiC,QAAS,0EACjB,CAACjC,GAAI,EAAGiC,QAAS,2BACjB,CAACjC,GAAI,EAAGiC,QAAS,mDACjB,CAACjC,GAAI,EAAGiC,QAAS,mCAErBW,eAAgB,IC7BdrD,EAA4B,G,wBCiB5BsD,EAAcC,YAAgB,CAChCC,YH0C0B,WAA2E,IAA1EnD,EAAyE,uDAAjEL,EAAcJ,EAAmD,uCACpG,OAAQA,EAAOU,MACX,KAAKiC,EACD,IAAMkB,EAAoB,CACtBhD,IAAI,IAAIiD,MAAOC,UACfjB,QAAS9C,EAAOgE,SAChBjB,UAAW,GAGf,OAAO,2BAAItC,GAAX,IAAkBoC,MAAM,GAAD,mBAAMpC,EAAMoC,OAAZ,CAAmBgB,IAAUb,YAAa,KAErE,KAAKJ,EACD,OAAO,2BAAInC,GAAX,IAAkBuC,YAAahD,EAAOiE,UAE1C,IAAK,mBACD,OAAO,2BAAIxD,GAAX,IAAkBwC,QAASjD,EAAOiD,UAEtC,IAAK,kBACD,OAAO,2BAAIxC,GAAX,IAAkBhB,OAAQO,EAAOP,SAErC,IAAK,cACD,OAAO,2BAAIgB,GAAX,IAAkBoC,MAAOpC,EAAMoC,MAAM7B,QAAO,SAAArC,GAAI,OAAIA,EAAKkC,KAAOb,EAAOa,QAE3E,QACI,OAAOJ,IGjEfyD,YFa0B,WAAgE,IAA/DzD,EAA8D,uDAAtDL,EAAcJ,EAAwC,uCACzF,OAAQA,EAAOU,MACX,KAAK0C,EACD,IAAMe,EAA0B,CAC5BtD,IAAI,IAAIiD,MAAOC,UACfjB,QAAS9C,EAAOoE,aAEpB,OAAO,2BAAI3D,GAAX,IAAkB+C,QAAQ,GAAD,mBAAM/C,EAAM+C,SAAZ,CAAqBW,IAAaV,eAAgB,KAE/E,KAAKJ,EACD,OAAO,2BAAI5C,GAAX,IAAkBgD,eAAgBzD,EAAOiE,UAE7C,QACI,OAAOxD,IEzBf4D,QDlB0B,WAAqD,IAApD5D,EAAmD,uDAA3CL,EAEnC,OAAOK,GCiBP6D,YAAa9D,IACb+D,WAAYtC,IACZuC,KLPuB,WAAqE,IAApE/D,EAAmE,uDAA3DL,EAAcJ,EAA6C,uCAC3F,OAAQA,EAAOU,MACX,IAAK,gBACD,OAAO,2BAAID,GAAUT,EAAOwC,SAEhC,QACI,OAAO/B,IKEfgE,IJdsB,WAAiE,IAAhEhE,EAA+D,uDAAvDL,EAAcJ,EAAyC,uCACtF,OAAQA,EAAOU,MACX,IAAK,kBACD,OAAO,2BAAID,GAAX,IAAkBiC,aAAa,IAEnC,QACI,OAAOjC,MIWNiE,EAAQC,YAAYjB,EAAakB,YAAgBC,MAG9DC,OAAOJ,MAAQA,E,6CCvBR,SAASK,EAASC,GACrB,OAAS,8BACG,qBAAKvD,UAAWC,IAAEuD,SAAlB,SACI,cAAC,IAAD,CAASC,GAAI,aAAeF,EAAMnE,GAAlC,SAAuCmE,EAAMzB,W,qBCL1D,SAAS4B,EAAWH,GACvB,OAAS,8BACD,qBAAKvD,UAAWC,IAAE0D,WAAlB,SACKJ,EAAMlC,Y,YC8BvB,IAAMuC,EAA0D,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAO9D,OACI,qBAAK7D,UAAWC,IAAE6D,eAAlB,SACI,cAAC,IAAD,CACIC,cAAe,CAACrB,WAAY,IAC5BsB,SATc,SAACC,EAAD,GAAgG,IAAxEC,EAAuE,EAAvEA,cAC9CL,EAAWI,EAAOvB,YAClBwB,GAAc,IAKV,SAIK,gBAAEC,EAAF,EAAEA,aAAF,OACG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOnE,UAAWC,IAAEmE,SAAUnF,KAAK,WAAW6C,KAAK,aAC5CuC,YAAY,0BACZC,aAAa,QAEpB,wBAAQrF,KAAK,SAASsF,SAAUJ,EAAhC,6B,QClDlBK,EAAkB,SAACxF,GACrB,MAAO,CACH6B,OAAQ7B,EAAM+D,KAAKlC,SAIpB,SAAS4D,EAAqBC,GAOjC,OAAOC,YAAQH,EAARG,EANmB,SAACpB,GACOA,EAAzB1C,OADgD,IACpC+D,EADmC,YACtBrB,EADsB,YAGpD,OAAIA,EAAM1C,OACH,cAAC6D,EAAD,eAAeE,IADG,cAAC,IAAD,CAAUnB,GAAIoB,GAAKC,WCApD,IAQeC,cACXJ,aAToB,SAAC3F,GACrB,MAAO,CACHyD,YAAazD,EAAMyD,YACnB5B,OAAQ7B,EAAM+D,KAAKlC,UAME,CAACgD,WP0BJ,SAAClB,GAEvB,MAAO,CACH1D,KAAM0C,EACNgB,YAAaA,IO9BqBqC,gBPiCX,SAACxC,GAC5B,MAAO,CACHvD,KAAM2C,EACNY,QAASA,MOnCbiC,EAFWM,EFnBR,SAAkBxB,GAErB,IAKI0B,EAAe1B,EAAMd,YAAYZ,MAAM3C,KAAI,SAAAgG,GAAC,OAAI,cAAC5B,EAAD,CAAqBlE,GAAI8F,EAAE9F,GAAI0C,KAAMoD,EAAEpD,MAAxBoD,EAAE9F,OACjE+F,EAAgB5B,EAAMd,YAAYV,QAAQ7C,KAAI,SAAAkG,GAAC,OAAI,cAAC1B,EAAD,CAAuBrC,QAAS+D,EAAE/D,SAAjB+D,EAAEhG,OAG1E,OACI,sBAAKY,UAAWC,IAAEoF,SAAlB,UACI,qBAAKrF,UAAWC,IAAE4B,MAAlB,SACKoD,IAGL,sBAAKjF,UAAWC,IAAE8B,QAAlB,UACKoD,EACD,cAAC,EAAD,CAAmBtB,WAjBZ,SAACnB,GAChBa,EAAMM,WAAWnB,e,qCGXV,OAA0B,mCCA1B,OAA0B,qCCU5B4C,GAAoC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,WAAYtI,EAAY,EAAZA,OAC3D,OAAO,qBAAK+C,UAAWC,KAAEuF,MAAlB,SACH,qBAAKxF,UAAWC,KAAEwF,OAAlB,SACI,qBACItF,IAAgB,QAAXlD,EAAmByI,GAAWH,GAA0BI,GAC7DtF,IAAI,gB,6BCPPuF,GAAb,4MACI5G,MAAQ,CACJ6G,UAAU,EACV7H,OAAQ,EAAKuF,MAAMvF,QAH3B,EAKI8H,iBAAmB,WACf,EAAKC,SAAS,CACVF,UAAU,KAPtB,EAUIG,mBAAqB,WACjB,EAAKD,SAAS,CACVF,UAAU,IAEd,EAAKtC,MAAMxF,aAAa,EAAKiB,MAAMhB,SAd3C,EAgBIiI,eAAiB,SAACC,GACd,EAAKH,SAAS,CACV/H,OAAQkI,EAAEC,cAAcC,SAlBpC,uDAsBI,WACIC,KAAKN,SAAS,CACV/H,OAAQqI,KAAK9C,MAAMvF,WAxB/B,oBA4BI,WACI,OAAO,8BACDqI,KAAKrH,MAAM6G,SAIP,uBAAOO,MAAOC,KAAKrH,MAAMhB,OAClBsI,OAAQD,KAAKL,mBACbO,SAAUF,KAAKJ,eACfO,WAAS,IANhB,sBAAMC,cAAeJ,KAAKP,iBAA1B,SACGO,KAAK9C,MAAMvF,OAASqI,KAAK9C,MAAMvF,OAAS,yBAhC7D,GAAmC0I,IAAMhC,WCI5BiC,GAAmC,SAAC,GAIO,IAHHnF,EAGE,EAHFA,QACAxD,EAEE,EAFFA,OACAD,EACE,EADFA,aAEjD,OAAKyD,EAEE,sBAAKxB,UAAWC,KAAE2G,KAAlB,UACH,qBAAI5G,UAAWC,KAAE4G,WAAjB,UACI,mDACA,8DAEJ,uBACA,sBAAK7G,UAAWC,KAAE6G,UAAlB,UACI,sBAAK9G,UAAS,UAAKC,KAAE8G,UAAP,YAAoB9G,KAAE+G,OAApC,kBACS,uBADT,YAEa,uBAFb,cAGe,uBAHf,UAIW,0BAEX,sBAAKhH,UAAWC,KAAE8G,UAAlB,UACKvF,EAAQyF,SAAWzF,EAAQyF,SAAW,iBAAiB,uBACvDzF,EAAQ0F,QAAU1F,EAAQ0F,QAAU,iBAAiB,uBACrD1F,EAAQ2F,eAAiB,wBACpB3F,EAAQ4F,0BAA4B5F,EAAQ4F,0BACxC,iBAAiB,uBAE3B,cAAC,GAAD,CAAepJ,OAAQA,EAAQD,aAAcA,OAGjD,sBAAKiC,UAAS,UAAKC,KAAE8G,UAAP,YAAoB9G,KAAE+G,OAApC,sBACa,uBADb,MAEO,uBAFP,aAGc,uBAHd,UAIW,0BAEX,sBAAKhH,UAAWC,KAAE8G,UAAlB,UACKvF,EAAQ6F,SAASC,SAAW9F,EAAQ6F,SAASC,SAAW,iBAAiB,uBACzE9F,EAAQ6F,SAASE,GAAK/F,EAAQ6F,SAASE,GAAK,iBAAiB,uBAC7D/F,EAAQ6F,SAASG,UAAYhG,EAAQ6F,SAASG,UAAY,iBAAiB,uBAC3EhG,EAAQ6F,SAASI,OAASjG,EAAQ6F,SAASI,OAAS,iBAAiB,gCAnC7D,cAAC1H,GAAA,EAAD,K,oBCPZ2H,GAAiBhB,IAAMiB,MAAK,SAACpE,GAYtC,OAAO,sBAAKvD,UAAWC,KAAE2H,YAAlB,wBAEH,uBACA,sBAAM5H,UAAWC,KAAEwF,OAAnB,SACI,qBACItF,IAAK,qLACLE,IAAK,aAIb,0BAAUgE,YAAa,0BAA2B+B,MAAO7C,EAAMlC,QAASkF,SAdvD,SAACL,GAClB3C,EAAMsE,aAAa3B,EAAEC,cAAcC,UAcnC,uBACA,wBAAQ0B,QArBI,WACZvE,EAAMwE,QAAQxE,EAAMlC,SACpBkC,EAAMsE,aAAa,KAmBnB,uB,oBC1BD,SAASG,GAAKzE,GACjB,OAAO,sBAAKvD,UAAWC,KAAEgI,KAAlB,UACH,sBAAKjI,UAAWC,KAAEiI,UAAlB,UACK,sBAAMlI,UAAWC,KAAEwF,OAAnB,SACD,qBAAKtF,IAAK,qLACVE,IAAI,aAEJ,qBAAKL,UAAWC,KAAEkI,SAAlB,SAA6B5E,EAAMlC,aAEvC,8BACI,2CAAckC,EAAM6E,kBCRzB,SAASC,GAAe9E,GAE3B,IAAI+E,EAAc/E,EAAMnC,MAAMlC,KAAI,SAAAqJ,GAAC,OAAI,cAACP,GAAD,CAAiB3G,QAASkH,EAAElH,QAAS+G,UAAWG,EAAEjH,WAAvCiH,EAAEnJ,OAEpD,OAAO,qBAAKY,UAAWC,KAAEuI,SAAlB,SACFF,ICHF,ICyDMG,GAAuB9D,aAlBZ,SAAC3F,GACrB,MAAO,CACHmD,YAAanD,EAAMmD,gBAIA,SAAC9D,GACxB,MAAO,CACH0J,QAAS,SAACxF,GACNlE,ElBoCa,SAACkE,GACtB,MAAO,CACHtD,KAAMiC,EACNqB,YkBvCamG,CAAUnG,KAEvBsF,aAAc,SAACrF,GACXnE,ElBwCkB,SAACmE,GAC3B,MAAO,CACHvD,KAAMkC,EACNqB,WkB3CamG,CAAenG,QAMAmC,EDzDoB,SAAC,GAA0C,IAAzCxC,EAAwC,EAAxCA,YAAa4F,EAA2B,EAA3BA,QAASF,EAAkB,EAAlBA,aAC5E,OACI,qCACI,cAACH,GAAD,CAAgBrG,QAASc,EAAYZ,YACrBwG,QAASA,EACTF,aAAcA,IAE9B,cAACQ,GAAD,CAAgBjH,MAAOe,EAAYf,cELlCwH,GAAsC,SAAC,GAIO,IAHHpH,EAGE,EAHFA,QACAxD,EAEE,EAFFA,OACAD,EACE,EADFA,aAGpD,OAAO,sBAAKiC,UAAWC,IAAE4I,QAAlB,UACH,cAAC,GAAD,CAActD,WAAU,OAAE/D,QAAF,IAAEA,OAAF,EAAEA,EAASsH,OAAOC,MAAO9L,OAAM,OAAEuE,QAAF,IAAEA,OAAF,EAAEA,EAASvE,SAClE,cAAC,GAAD,CAAauE,QAASA,EAASxD,OAAQA,EAAQD,aAAcA,IAC7D,cAAC0K,GAAD,QCdFO,G,uKAEF,WACI,IAAI/L,EAASoJ,KAAK9C,MAAM0F,MAAMC,OAAOjM,OAChCA,IAAQA,EAAS,SACtBoJ,KAAK9C,MAAM4F,iBAAiBlM,GAC5BoJ,KAAK9C,MAAM6F,gBAAgBnM,K,oBAG/B,WACI,OAAO,cAAC,GAAD,CAASuE,QAAS6E,KAAK9C,MAAM/B,QACpBxD,OAAQqI,KAAK9C,MAAMvF,OACnBD,aAAcsI,KAAK9C,MAAM8F,qB,GAZlB3C,IAAMhC,WA0CtBK,eACXJ,aAToB,SAAC3F,GACrB,MAAO,CACHwC,QAASxC,EAAMmD,YAAYX,QAC3BX,OAAQ7B,EAAM+D,KAAKlC,OACnB7C,OAAQgB,EAAMmD,YAAYnE,UAKL,CAACmL,iBpB6EE,SAAClM,GAAD,8CAAsC,WAAOoB,GAAP,eAAAG,EAAA,sEAC7CZ,IAAWC,gBAAgBZ,GADkB,OAC9DH,EAD8D,OAGlEuB,EAASoD,EAAe3E,EAASC,OAHiC,2CAAtC,uDoB7EgBqM,gBpBmFjB,SAACnM,GAAD,8CAAsC,WAAOoB,GAAP,eAAAG,EAAA,sEAC5CZ,IAAWE,cAAcb,GADmB,OAC7DH,EAD6D,OAGjEuB,EAASqD,EAAc5E,EAASC,OAHiC,2CAAtC,uDoBnFkCsM,epByFnC,SAACrL,GAAD,8CAAsC,WAAOK,GAAP,SAAAG,EAAA,sEAC3CZ,IAAWG,aAAaC,GADmB,OAG/B,IAH+B,OAGnDjB,KAAK2B,YACdL,EAASqD,EAAc1D,IAJqC,2CAAtC,yDoBxF1BsL,IACA7E,EAHWM,CAIbiE,I,oBC5CWO,GAA8B,SAAC,GAA+B,IAA9B1I,EAA6B,EAA7BA,OAAQD,EAAqB,EAArBA,MAAO4I,EAAc,EAAdA,SAExD,OAAO,yBAAQxJ,UAAWC,KAAEwJ,OAArB,UACH,qBAAKtJ,IAAK,0DAA2DE,IAAI,SACzE,qBAAKL,UAAWC,KAAEyJ,SAAlB,2BACA,qBAAK1J,UAAWC,KAAEW,MAAlB,SACKC,EACK,sBAAKb,UAAWC,KAAE0J,eAAlB,UACG/I,EACD,wBAAQZ,UAAWC,KAAE2J,OAAQ9B,QAAS0B,EAAtC,uBAEF,cAAC,IAAD,CAAS/F,GAAIoB,GAAKC,MAAlB,yBCGZ+E,G,4JAEF,WACI,OAAO,cAAC,GAAD,CAAQhJ,OAAQwF,KAAK9C,MAAM1C,OAAQD,MAAOyF,KAAK9C,MAAM3C,MAAO4I,SAAUnD,KAAK9C,MAAMiG,e,GAHlE9C,IAAMhC,WAQrBC,gBAhBS,SAAC3F,GACrB,MAAO,CACH6B,OAAQ7B,EAAM+D,KAAKlC,OACnBD,MAAO5B,EAAM+D,KAAKnC,SAac,CAACI,gBAAewI,SxBmBhC,yDAAwB,WAAOnL,GAAP,SAAAG,EAAA,sEACvBnB,IAAQM,SADe,OAGX,IAHW,OAG/BZ,KAAK2B,YACdL,EAASyC,EAAY,KAAM,KAAM,MAAM,IAJC,2CAAxB,wDwBnBT6D,CAAoDkF,I,uCCxB5D,SAASC,GAAOvG,GAEtB,OAAO,sBAAKvD,UAAWC,KAAE8J,IAAlB,UAEH,qBAAK/J,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKmF,QAAUzG,EAAMtG,OAAQgN,gBAAiBhK,KAAEiK,OAA7D,uBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKsF,SAAUF,gBAAiBhK,KAAEiK,OAA/C,wBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKuF,QAASH,gBAAiBhK,KAAEiK,OAA9C,uBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKwF,MAAOJ,gBAAiBhK,KAAEiK,OAA5C,qBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKyF,MAAOL,gBAAiBhK,KAAEiK,OAA5C,qBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAG,SAASwG,gBAAiBhK,KAAEiK,OAAxC,qBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAG,UAAUwG,gBAAiBhK,KAAEiK,OAAzC,sBAEJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAG,YAAYwG,gBAAiBhK,KAAEiK,OAA3C,wBAGJ,qBAAKlK,UAAWC,KAAEgI,KAAlB,SACI,cAAC,IAAD,CAASxE,GAAIoB,GAAKC,MAAOmF,gBAAiBhK,KAAEiK,OAA5C,wB,IChCHK,G,uKAEF,WAA2B,IAAD,OAElBtN,EAASoJ,KAAK9C,MAAMtG,OACxBd,KAAMS,IAAI,wDAA0DK,EAAQ,CAACZ,iBAAiB,IACzFQ,MAAK,SAAAC,GACF,EAAKyG,MAAM9B,eAAe3E,EAASC,W,oBAG/C,WACI,OAAO,cAAC+M,GAAD,CAAQ7M,OAAQoJ,KAAK9C,MAAMtG,a,GAXZyJ,IAAMhC,WAiCrBC,gBARS,SAAC3F,GACrB,MAAO,CACH6B,OAAQ7B,EAAM+D,KAAKlC,OACnB5D,OAAQ+B,EAAM+D,KAAK9F,UAKa,CAACwE,kBAA1BkD,CAA2C4F,IC5BpDC,I,MAAmB9D,IAAM+D,MAAK,kBAAM,kCACpCC,GAAQhE,IAAM+D,MAAK,kBAAM,iCACzBE,GAAQjE,IAAM+D,MAAK,kBAAM,iCAElB5F,GAAO,CAChBmF,QAAS,YACTG,SAAU,aACVC,QAAS,YACTC,MAAO,UACPC,MAAO,UACPxF,MAAO,WAQL8F,G,uKACF,WACIvE,KAAK9C,MAAMsH,kB,oBAGf,WACI,OAAKxE,KAAK9C,MAAMtC,YAIZ,sBAAKjB,UAAU,cAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,qBAAKA,UAAU,sBAAf,SACI,cAAC,WAAD,CAAU8K,SAAU,cAAC/K,GAAA,EAAD,IAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOgL,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,cAAC,IAAD,CAAUxH,GAAIoB,GAAKmF,aAEvD,cAAC,IAAD,CAAOe,KAAMlG,GAAKmF,QAAU,WAAYiB,OAAQ,kBAAM,cAAC,GAAD,OACtD,cAAC,IAAD,CAAOF,KAAMlG,GAAKsF,SAAUc,OAAQ,kBAAM,cAACC,EAAD,OAC1C,cAAC,IAAD,CAAOH,KAAMlG,GAAKuF,QAASa,OAAQ,kBAAM,cAACT,GAAD,OACzC,cAAC,IAAD,CAAOO,KAAMlG,GAAKwF,MAAOY,OAAQ,kBAAM,cAACN,GAAD,OACvC,cAAC,IAAD,CAAOI,KAAMlG,GAAKyF,MAAOW,OAAQ,kBAAM,cAACP,GAAD,iBAhBvB,cAAC3K,GAAA,EAAD,Q,GAN1B2G,IAAMhC,WA0ClByG,GAAexG,aANG,SAAC3F,GACrB,MAAO,CACHiC,YAAajC,EAAMgE,IAAI/B,eAIe,CAAC4J,c1BxClB,kBAA4D,SAACxM,GACtFA,EAAS2C,KACJnE,MAAK,WACFwB,EARD,CACHY,KAAM,0B0B4CO0F,CAA0CiG,IAWhDQ,IATC,WAEZ,OAAO,cAAC,IAAD,UACH,cAAC,IAAD,CAAUnI,MAAOA,EAAjB,SACI,cAACkI,GAAD,U,kBC7EZjN,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,mBCAjFD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,WAAa,iC,mBCA/BD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,SAAW,0BAA0B,MAAQ,yB,mBCA1GD,EAAOC,QAAU,CAAC,QAAU,6B,qGCabkN,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1O,MAAK,YAAkD,IAA/C2O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wCCFdO,IAASZ,OACD,cAAC,IAAMa,WAAP,UACI,cAAC,IAAD,MAEJC,SAASC,eAAe,SAShCX,M","file":"static/js/main.b80db683.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {FriendType} from \"../redux/friendsReducer\";\r\nimport {ProfileType} from \"../redux/profileReducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    headers: {\r\n        'API-KEY': 'c0caff3e-2af3-4ee5-bed5-c0d120d6cc75'\r\n    }\r\n})\r\n\r\nexport const UserAPI = {\r\n    getUsers(currentPage = 1, pageLimit = 4) {\r\n        return instance.get<GetUsersResponse>(`/users?page=${currentPage}&count=${pageLimit}`).then(response => response.data)\r\n    },\r\n    followUser(userId = 20572) {\r\n        return instance.post<ResponseApiType>(`/follow/${userId}`, {}).then(response => response.data)\r\n    },\r\n    unfollowUser(userId = 20572) {\r\n        return instance.delete<ResponseApiType>(`/follow/${userId}`).then(response => response.data)\r\n    },\r\n}\r\nexport const AuthAPI = {\r\n    me() {\r\n        return instance.get<ApiResponseType>('/auth/me').then(response => response.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<ResponseApiType<{ userId: number }>>('/auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseApiType>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUsersProfile(userId: string) {\r\n        return instance.get<ProfileType>(`/profile/` + userId)\r\n    },\r\n    getUserStatus(userId: string) {\r\n        return instance.get<string>(`/profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseApiType>(`/profile/status/`, {status})\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type ResponseApiType<T = {}> = {\r\n    data: T\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\n\r\ntype GetUsersResponse = {\r\n    items: FriendType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype DataType = {\r\n    id: string\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype ApiResponseType = {\r\n    data: DataType\r\n    messages: []\r\n    fieldsErrors: []\r\n    resultCode: number\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__2x6Zn\",\"infoHeader\":\"ProfileInfo_infoHeader__Pja8z\",\"infoBlock\":\"ProfileInfo_infoBlock__2gBWX\",\"basicItem\":\"ProfileInfo_basicItem__TsI3b\",\"order\":\"ProfileInfo_order__1g0gF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allPosts\":\"ProfileAllPost_allPosts__3Yx86\",\"avatar\":\"ProfileAllPost_avatar__1td7S\",\"item\":\"ProfileAllPost_item__1gpBp\",\"postBlock\":\"ProfileAllPost_postBlock__1Eo8o\",\"postItem\":\"ProfileAllPost_postItem__3P-iU\"};","import {Dispatch} from \"redux\";\r\nimport {followUnfollowActionsType, toggleIsFollowingProgress, UserActionType} from \"../redux/friendsReducer\";\r\n\r\n\r\nexport const followUnfollowFlow = async (dispatch: Dispatch, userId: number,\r\n                                         apiMethod: (userId: number) => any,\r\n                                         action: (friendId: number) => followUnfollowActionsType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(action(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n","import {ThunkCreatorType} from \"./redux-store\";\r\nimport {UserAPI} from \"../api/api\";\r\nimport {followUnfollowFlow} from \"../utils/helper-utils\";\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type FriendType = {\r\n    name: string\r\n    id: number\r\n    photos: PhotosType\r\n    status: string\r\n    followed: boolean\r\n    uniqueUrlName: null | string\r\n}\r\nexport type initialStateType = {\r\n    friends: Array<FriendType>\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst initialState: initialStateType = {\r\n    friends: [],\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nexport const friendsReducer = (state = initialState, action: UserActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state, friends: state.friends.map(f => f.id === action.friendId\r\n                    ? {...f, followed: true} : f)\r\n            };\r\n\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state, friends: state.friends.map(f => f.id === action.friendId\r\n                    ? {...f, followed: false} : f)\r\n            };\r\n\r\n        case \"SET-FRIENDS\":\r\n            return {...state, friends: [...action.friends]}\r\n\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return action.isFetching\r\n                ? {...state, followingInProgress: [...state.followingInProgress, action.userId]}\r\n                : {...state, followingInProgress: state.followingInProgress.filter(id => id !== action.userId)}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UserActionType = followUnfollowActionsType\r\n    | ReturnType<typeof setFriends>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport  type followUnfollowActionsType = ReturnType<typeof follow> | ReturnType<typeof unfollow>\r\n\r\nexport const follow = (friendId: number) => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        friendId\r\n    } as const\r\n}\r\n\r\nexport const unfollow = (friendId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        friendId\r\n    } as const\r\n}\r\n\r\nexport const setFriends = (friends: Array<FriendType>) => {\r\n    return {\r\n        type: 'SET-FRIENDS',\r\n        friends\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: \"TOGGLE-IS-FETCHING\",\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: \"TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n        isFetching, userId\r\n    } as const\r\n}\r\n\r\n\r\nexport const followTC = (userId: number): ThunkCreatorType => async (dispatch) => {\r\n    const apiMethod = UserAPI.followUser.bind(UserAPI)\r\n\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, follow)\r\n}\r\n\r\nexport const unfollowTC = (userId: number): ThunkCreatorType => async (dispatch) => {\r\n    const apiMethod = UserAPI.unfollowUser.bind(UserAPI)\r\n\r\n    await followUnfollowFlow(dispatch, userId, apiMethod, unfollow)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__1utBD\",\"users\":\"Messages_users__3SitC\",\"dialogs\":\"Messages_dialogs__1CLbr\",\"addMessageForm\":\"Messages_addMessageForm__37_7O\",\"textarea\":\"Messages_textarea__1Pj1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__OaBot\",\"logoText\":\"Header_logoText__3QfK7\",\"login\":\"Header_login__Qsgun\",\"loginContainer\":\"Header_loginContainer__1_yXZ\",\"button\":\"Header_button__1CJMQ\"};","export default __webpack_public_path__ + \"static/media/ball-triangle.ad4227d2.svg\";","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\nimport loadingGif from \"../../assets/images/ball-triangle.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img className={s.loading} src={loadingGif} alt='loading'/>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"ProfileCover_cover__2PVLm\",\"avatar\":\"ProfileCover_avatar__2mEE0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createPosts\":\"ProfileNewPost_createPosts__1qtM-\",\"avatar\":\"ProfileNewPost_avatar__1Nc9I\"};","import {setFriends, toggleIsFetching} from \"./friendsReducer\"\r\nimport {UserAPI} from \"../api/api\";\r\nimport {ThunkCreatorType} from \"./redux-store\";\r\n\r\n\r\nexport type initialStateType = {\r\n    pageLimit: number\r\n    totalCount: number\r\n    pageNeighbours: number\r\n    currentPage: number\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    totalCount: 0,\r\n    pageLimit: 4,\r\n    pageNeighbours: 1,\r\n    currentPage: 1,\r\n}\r\n\r\nexport const paginationReducer = (state = initialState, action: PaginationActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.page}\r\n        case \"SET-TOTAL-COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport type PaginationActionType = ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof setFriends>\r\n    | ReturnType<typeof toggleIsFetching>\r\n\r\n\r\nexport const setTotalCount = (totalCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-COUNT\",\r\n        totalCount\r\n    } as const\r\n}\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        page\r\n    } as const\r\n}\r\n\r\nexport const getUserTC = (currentPage: number, pageLimit: number): ThunkCreatorType => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n\r\n    let response = await UserAPI.getUsers(currentPage, pageLimit)\r\n\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setFriends(response.items));\r\n    dispatch(setTotalCount(response.totalCount))\r\n\r\n}\r\n","import {ThunkCreatorType} from \"./redux-store\";\r\nimport {AuthAPI} from \"../api/api\";\r\n\r\ntype InitialStateType = {\r\n    userId: string | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\nexport type AuthActionType = ReturnType<typeof setAuthData>\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-AUTH-DATA\":\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthData = (userId: string | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: \"SET-AUTH-DATA\",\r\n        payload: {userId, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport const getAuthDataTC = (): ThunkCreatorType => async (dispatch) => {\r\n    let data = await AuthAPI.me()\r\n\r\n    if (data.resultCode === 0) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkCreatorType => async (dispatch) => {\r\n    let response = await AuthAPI.logIn(email, password, rememberMe)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthDataTC())\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): ThunkCreatorType => async (dispatch) => {\r\n    let response = await AuthAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthData(null, null, null, false))\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {getAuthDataTC} from \"./authReducer\";\r\n\r\nexport type initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-INITIALISED\":\r\n            return {...state, initialized: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setInitialised>\r\n\r\n\r\nexport const setInitialised = () => {\r\n    return {\r\n        type: \"SET-INITIALISED\",\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkAction<void, AppStateType, unknown, ActionType> => (dispatch) => {\r\n    dispatch(getAuthDataTC())\r\n        .then(() => {\r\n            dispatch(setInitialised())\r\n        })\r\n}\r\n","import {ThunkCreatorType} from \"./redux-store\";\r\nimport {ProfileAPI} from \"../api/api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: string | null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null,\r\n    github: string\r\n    mainLink: null\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePageType = {\r\n    posts: PostType[]\r\n    newPostText: string,\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST = \"UPDATE-NEW-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_USER_STATUS = \"SET-USER-STATUS\";\r\n\r\nconst initialState: ProfilePageType = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: \"Work hard to get what you like, otherwise you'll be forced to just like what you get.\",\r\n            likeCount: 15\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Success is the ability to go from failure to failure without losing your enthusiasm.\",\r\n            likeCount: 20\r\n        }\r\n    ],\r\n    newPostText: '',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: UserProfileActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postText,\r\n                likeCount: 0\r\n            }\r\n\r\n            return {...state, posts: [...state.posts, newPost], newPostText: ''};\r\n\r\n        case UPDATE_NEW_POST:\r\n            return {...state, newPostText: action.newText};\r\n\r\n        case \"SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n\r\n        case \"SET-USER-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n        case \"DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UserProfileActionType = ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof onPostChangeAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePostAC>\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        postText\r\n    } as const\r\n}\r\n\r\nexport const onPostChangeAC = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST,\r\n        newText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType | null) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const deletePostAC = (id: number) => {\r\n    return {\r\n        type: \"DELETE-POST\",\r\n        id\r\n    } as const\r\n}\r\n\r\nexport const getUserProfileTC = (userId: string): ThunkCreatorType => async (dispatch) => {\r\n    let response = await ProfileAPI.getUsersProfile(userId)\r\n\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getUserStatusTC = (userId: string): ThunkCreatorType => async (dispatch) => {\r\n    let response = await ProfileAPI.getUserStatus(userId)\r\n\r\n    dispatch(setUserStatus(response.data))\r\n\r\n}\r\nexport const updateStatusTC = (status: string): ThunkCreatorType => async (dispatch) => {\r\n    let response = await ProfileAPI.updateStatus(status)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}","export type UsersType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type MessagePageType = {\r\n    users: UsersType[]\r\n    dialogs: DialogsType[]\r\n    newMessageText: string\r\n}\r\n\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE = \"UPDATE-NEW-MESSAGE\";\r\n\r\nconst initialState: MessagePageType = {\r\n    users: [\r\n        {id: 1, name: \"Linda Logan\"},\r\n        {id: 2, name: \"Sophia Lee\"},\r\n        {id: 3, name: \"John Doe\"},\r\n        {id: 4, name: \"Anna Young\"},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, message: \"Hi honey, how are you doing???? Long time no see. Where have you been?\"},\r\n        {id: 2, message: \"I have been on vacation\"},\r\n        {id: 3, message: \"It was a great time for me. we had a lot of fun\"},\r\n        {id: 4, message: \"That's cool. I wish I were you\"}\r\n    ],\r\n    newMessageText: ''\r\n}\r\n\r\nexport const messageReducer = (state = initialState, action: ActionType): MessagePageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: DialogsType = {\r\n                id: new Date().getTime(),\r\n                message: action.messageText,\r\n            }\r\n            return {...state, dialogs: [...state.dialogs, newMessage], newMessageText: ''};\r\n\r\n        case UPDATE_NEW_MESSAGE:\r\n            return {...state, newMessageText: action.newText};\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addMessage> | ReturnType<typeof onMessageChange>\r\n\r\nexport const addMessage = (messageText: string) => {\r\n\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        messageText: messageText\r\n    } as const\r\n}\r\nexport const onMessageChange = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE,\r\n        newText: newText\r\n    } as const\r\n}","export type SideBarType = {}\r\n\r\nconst initialState: SideBarType = {}\r\n\r\nexport const sideBarReducer = (state = initialState, action: any): SideBarType => {\r\n\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer, UserProfileActionType} from \"./profileReducer\";\r\nimport {messageReducer} from \"./messageReducer\";\r\nimport {sideBarReducer} from \"./sideBarReducer\";\r\nimport {friendsReducer, UserActionType} from \"./friendsReducer\";\r\nimport {PaginationActionType, paginationReducer} from \"./paginationReducer\";\r\nimport {AuthActionType, authReducer} from \"./authReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n//типизация всех экшенов\r\nexport type ActionsType = UserActionType | PaginationActionType | AuthActionType | UserProfileActionType\r\n\r\n//типизация ThunkCreator\r\n\r\nexport type ThunkCreatorType = ThunkAction<any, AppStateType, unknown, ActionsType>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagePage: messageReducer,\r\n    sideBar: sideBarReducer,\r\n    friendsPage: friendsReducer,\r\n    pagination: paginationReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport s from './UserItem.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype UserItemPropsType = {\n    id: number\n    name: string\n}\n\nexport function UserItem(props: UserItemPropsType) {\n    return ( <div>\n                <div className={s.userItem}>\n                    <NavLink to={'/messages/' + props.id}>{props.name}</NavLink>\n                </div>\n        </div>\n    )\n}","import React from 'react';\nimport s from './DialogItem.module.css'\n\ntype DialogItemPropsType = {\n    message: string\n}\n\nexport function DialogItem(props: DialogItemPropsType) {\n    return ( <div>\n            <div className={s.dialogItem}>\n                {props.message}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport s from './Messages.module.css'\nimport {UserItem} from \"./UserItem/UserItem\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {MessagePropsType} from './MessagesContainer';\nimport {Field, Form, Formik} from \"formik\";\n\n\nexport function Messages(props: MessagePropsType) {\n\n    const addMessage = (newMessage: string) => {\n        props.addMessage(newMessage)\n    }\n\n\n    let usersElement = props.messagePage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>);\n    let dialogElement = props.messagePage.dialogs.map(d => <DialogItem key={d.id} message={d.message}/>);\n\n\n    return (\n        <div className={s.messages}>\n            <div className={s.users}>\n                {usersElement}\n            </div>\n\n            <div className={s.dialogs}>\n                {dialogElement}\n                <AddNewMessageForm addMessage={addMessage}/>\n            </div>\n        </div>\n    )\n}\n\ntype DataFormType = {\n    newMessage: string\n}\ntype AddNewMessageFormPropsType = {\n    addMessage: (newMessage: string) => void\n}\n\nconst AddNewMessageForm: React.FC<AddNewMessageFormPropsType> = ({addMessage}) => {\n\n    const addMessageHandler = (values: DataFormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        addMessage(values.newMessage)\n        setSubmitting(false)\n    }\n\n    return (\n        <div className={s.addMessageForm}>\n            <Formik\n                initialValues={{newMessage: ''}}\n                onSubmit={addMessageHandler}\n            >\n                {({isSubmitting}) => (\n                    <Form>\n                        <Field className={s.textarea} type=\"textarea\" name=\"newMessage\"\n                               placeholder='Write something here...'\n                               autoComplete=\"off\"\n                        />\n                        <button type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}","import React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../App\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T> (Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth,  ...restProps} = props\r\n\r\n        if(!props.isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react';\nimport {addMessage, MessagePageType, onMessageChange} from '../../redux/messageReducer';\nimport {Messages} from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose} from 'redux';\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\ntype mapStatePropsType = {\n    messagePage: MessagePageType\n    isAuth: boolean\n}\ntype mapDispatchPropsType = {\n    addMessage: (messageText: string) => void\n    onMessageChange: (newText: string) => void\n}\nexport type MessagePropsType = mapStatePropsType & mapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        messagePage: state.messagePage,\n        isAuth: state.auth.isAuth\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {addMessage, onMessageChange}),\n    withAuthRedirect\n)(Messages)","export default __webpack_public_path__ + \"static/media/nouser.6836a043.png\";","export default __webpack_public_path__ + \"static/media/myAvatar.7a94ce77.jpg\";","import React from 'react';\nimport s from \"./ProfileCover.module.css\";\nimport findAvatar from '../../../assets/images/nouser.png'\nimport myAvatar from '../../../assets/images/myAvatar.jpg'\n\ntype PropsType = {\n    userAvatar: string | undefined\n    userId: number | undefined\n}\n\nexport const ProfileCover: React.FC<PropsType> = ({userAvatar, userId}) => {\n    return <div className={s.cover}>\n        <div className={s.avatar}>\n            <img\n                src={userId === 20572 ? myAvatar : userAvatar ? userAvatar : findAvatar}\n                alt='avatar'\n            />\n        </div>\n    </div>\n}","import React, {ChangeEvent} from 'react';\n\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        });\n        this.props.updateStatus(this.state.status)\n    }\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        })\n    }\n\n    componentDidMount() {\n        this.setState({\n            status: this.props.status\n        })\n    }\n\n    render(): React.ReactNode {\n        return <div>\n            {!this.state.editMode\n                ? <span onDoubleClick={this.activateEditMode}>\n                    {this.props.status ? this.props.status : 'no information'}\n            </span>\n                : <input value={this.state.status}\n                         onBlur={this.deactivateEditMode}\n                         onChange={this.onStatusChange}\n                         autoFocus\n                />\n            }\n\n        </div>\n    }\n\n}","import React from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {ProfileType} from \"../../../redux/profileReducer\";\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo: React.FC<PropsType> = ({\n                                                     profile,\n                                                     status,\n                                                     updateStatus\n                                                 }) => {\n    if (!profile) return <Preloader/>\n\n    return <div className={s.info}>\n        <ul className={s.infoHeader}>\n            <li>Basic Information</li>\n            <li>Websites and Social Links</li>\n        </ul>\n        <hr/>\n        <div className={s.infoBlock}>\n            <div className={`${s.basicItem} ${s.order}`}>\n                Name:<br/>\n                About me:<br/>\n                Profession:<br/>\n                Status:<br/>\n            </div>\n            <div className={s.basicItem}>\n                {profile.fullName ? profile.fullName : 'no information'}<br/>\n                {profile.aboutMe ? profile.aboutMe : 'no information'}<br/>\n                {profile.lookingForAJob ? \"I'm locking for a job\"\n                    : profile.lookingForAJobDescription ? profile.lookingForAJobDescription\n                        : 'no information'}<br/>\n\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\n            </div>\n\n            <div className={`${s.basicItem} ${s.order}`}>\n                Facebook:<br/>\n                VK:<br/>\n                Instagram:<br/>\n                GitHub:<br/>\n            </div>\n            <div className={s.basicItem}>\n                {profile.contacts.facebook ? profile.contacts.facebook : 'no information'}<br/>\n                {profile.contacts.vk ? profile.contacts.vk : 'no information'}<br/>\n                {profile.contacts.instagram ? profile.contacts.instagram : 'no information'}<br/>\n                {profile.contacts.github ? profile.contacts.github : 'no information'}<br/>\n            </div>\n\n        </div>\n    </div>\n}","import React, {ChangeEvent} from 'react';\nimport s from \"./ProfileNewPost.module.css\";\n\ntype ProfileNewPostType = {\n    message: string\n    addPost: (postText: string) => void\n    onPostChange: (newText: string) => void\n}\n\n\nexport const ProfileNewPost = React.memo((props: ProfileNewPostType) => {\n\n\n    const addPost = () => {\n        props.addPost(props.message)\n        props.onPostChange('')\n    }\n\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.onPostChange(e.currentTarget.value)\n    }\n\n    return <div className={s.createPosts}>\n        Create Post\n        <hr/>\n        <span className={s.avatar}>\n            <img\n                src={\"https://sun1-83.userapi.com/s/v1/ig2/GTd8EAwDEzqcOlUQLoyckauXcHETC5dOMfQw_yPT0Xcc_mpfp5tD-GGnDG2DAG6pI4fi_7Ko5kdz_H2ofkuO7t5R.jpg?size=200x0&quality=96&crop=82,440,609,609&ava=1\\\"\"}\n                alt={'avatar'}\n            />\n        </span>\n\n        <textarea placeholder={\"Write something here...\"} value={props.message} onChange={onPostChange}/>\n        <hr/>\n        <button onClick={addPost}>Add</button>\n    </div>\n})\n\n","import React from \"react\";\nimport s from \"./ProfileAllPost.module.css\"\n\ntype PostType= {\n    message: string\n    likecount: number\n}\n\nexport function Post(props: PostType ) {\n    return <div className={s.item}>\n        <div className={s.postBlock}>\n             <span className={s.avatar}>\n            <img src={\"https://sun1-83.userapi.com/s/v1/ig2/GTd8EAwDEzqcOlUQLoyckauXcHETC5dOMfQw_yPT0Xcc_mpfp5tD-GGnDG2DAG6pI4fi_7Ko5kdz_H2ofkuO7t5R.jpg?size=200x0&quality=96&crop=82,440,609,609&ava=1\\\"\"}\n            alt='avatar'/>\n        </span>\n            <div className={s.postItem}>{props.message}</div>\n        </div>\n        <div>\n            <span>likes: {props.likecount}</span>\n        </div>\n\n    </div>\n}","import React from 'react';\nimport s from \"./ProfileAllPost.module.css\";\nimport {Post} from \"./Post\";\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\ntype ProfileAllPostType = {\n    posts: PostType[]\n}\n\nexport function ProfileAllPost(props: ProfileAllPostType) {\n\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likecount={p.likeCount}/>)\n\n    return <div className={s.allPosts}>\n        {postElement}\n    </div>\n}","import React from \"react\";\r\nimport {ProfileNewPost} from \"./NewPost/ProfileNewPost\";\r\nimport {ProfileAllPost} from \"./AllPosts/ProfileAllPost\";\r\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\r\n\r\n\r\ntype ProfilePostsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (postText: string) => void\r\n    onPostChange: (newText: string) => void\r\n}\r\n\r\nexport const ProfilePosts: React.FC<ProfilePostsType> = ({profilePage, addPost, onPostChange}) => {\r\n    return (\r\n        <>\r\n            <ProfileNewPost message={profilePage.newPostText}\r\n                            addPost={addPost}\r\n                            onPostChange={onPostChange}\r\n            />\r\n            <ProfileAllPost posts={profilePage.posts}/>\r\n        </>\r\n    )\r\n}","import {addPostAC, onPostChangeAC, ProfilePageType} from \"../../../../redux/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {ProfilePosts} from \"../ProfilePosts\";\nimport {AppStateType} from \"../../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\n/*\nexport function ProfilePostContainer(props: ProfilePostContainerType) {\n\n    return (\n\n        <StoreContext.Consumer>\n            {(store) => {\n\n                const state = store.getState()\n\n                const addPost = (postText: string) => {\n                    store.dispatch(addPostAC(postText))\n                   store.dispatch(onPostChangeAC(''))\n                }\n\n                const onPostChange = (newText: string) => {\n                    store.dispatch(onPostChangeAC(newText))\n                }\n\n                return (\n                    <>\n                        <ProfileNewPost message={state.profilePage.newPostText}\n                                        addPost={addPost}\n                                        onPostChange={onPostChange}\n                        />\n                        <ProfileAllPost posts={state.profilePage.posts}/>\n\n                    </>\n                )\n            }}\n        </StoreContext.Consumer>\n\n\n    )\n}*/\n\ntype mapStatePropsType = {\n    profilePage: ProfilePageType\n}\ntype mapDispatchPropsType = {\n    addPost: (postText: string) => void\n    onPostChange: (newText: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addPost: (postText: string) => {\n            dispatch(addPostAC(postText))\n        },\n        onPostChange: (newText: string) => {\n            dispatch(onPostChangeAC(newText))\n        }\n    }\n}\n\n\nexport const ProfilePostContainer = connect(mapStateToProps, mapDispatchToProps)(ProfilePosts)","import React from 'react';\nimport s from \"./Profile.module.css\"\nimport {ProfileCover} from \"./ProfileCover/ProfileCover\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {ProfilePostContainer} from \"./ProfilePosts/NewPost/ProfilePostContainer\";\nimport {ProfileType} from \"../../redux/profileReducer\";\n\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const Profile: React.FC<ProfilePropsType> = ({\n                                                        profile,\n                                                        status,\n                                                        updateStatus\n                                                    }) => {\n\n    return <div className={s.content}>\n        <ProfileCover userAvatar={profile?.photos.small} userId={profile?.userId}/>\n        <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\n        <ProfilePostContainer/>\n    </div>\n\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Profile} from \"./Profile\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getUserProfileTC, getUserStatusTC, ProfileType, updateStatusTC} from \"../../redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount(): void {\n        let userId = this.props.match.params.userId\n        if (!userId) userId = '20572'\n        this.props.getUserProfileTC(userId)\n        this.props.getUserStatusTC(userId)\n    }\n\n    render(): React.ReactNode {\n        return <Profile profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatusTC}/>\n    }\n}\n\ntype mapStatePropsType = {\n    profile: ProfileType | null\n    isAuth: boolean\n    status: string\n}\ntype mapDispatchPropsType = {\n    getUserProfileTC: (userId: string) => void\n    getUserStatusTC: (userId: string) => void\n    updateStatusTC: (status: string) => void\n}\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        profile: state.profilePage.profile,\n        isAuth: state.auth.isAuth,\n        status: state.profilePage.status,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfileTC, getUserStatusTC, updateStatusTC}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from \"./Header.module.css\"\nimport {PATH} from \"../../App\";\n\ntype PropsType = {\n    isAuth: boolean\n    login: string | null\n    logoutTC: () => void\n}\n\nexport const Header: React.FC<PropsType> = ({isAuth, login, logoutTC}) => {\n\n    return <header className={s.header}>\n        <img src={\"https://cdn-icons-png.flaticon.com/512/1659/1659076.png\"} alt='logo'/>\n        <div className={s.logoText}>CONNECTION...</div>\n        <div className={s.login}>\n            {isAuth\n                ? <div className={s.loginContainer}>\n                    {login}\n                    <button className={s.button} onClick={logoutTC}>Logout</button>\n                </div>\n                : <NavLink to={PATH.LOGIN}>LOGIN</NavLink>\n            }\n        </div>\n    </header>\n\n}","import React from 'react';\nimport {Header} from \"./Header\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {connect} from 'react-redux';\nimport {getAuthDataTC, logoutTC} from \"../../redux/authReducer\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n    login: string | null\n}\ntype MapDispatchPropsType = {\n    getAuthDataTC: () => void\n    logoutTC: () => void\n}\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\n\nclass HeaderContainer extends React.Component<PropsType> {\n\n    render(): React.ReactNode {\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logoutTC={this.props.logoutTC}/>\n    }\n\n}\n\nexport default connect(mapStateToProps, {getAuthDataTC, logoutTC})(HeaderContainer)","import React from 'react';\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {PATH} from \"../../App\";\n\ntype NavbarPropsType = {\n    userId: string | null\n}\n\nexport function Navbar(props:NavbarPropsType) {\n\n return <nav className={s.nav}>\n\n     <div className={s.item}>\n         <NavLink to={PATH.PROFILE + props.userId} activeClassName={s.active}>Profile</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to={PATH.MESSAGES} activeClassName={s.active}>Messages</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to={PATH.FRIENDS} activeClassName={s.active}>Friends</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to={PATH.MUSIC} activeClassName={s.active}>Music</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to={PATH.VIDEO} activeClassName={s.active}>Video</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to='/image' activeClassName={s.active}>Image</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to='/events' activeClassName={s.active}>Events</NavLink>\n     </div>\n     <div className={s.item}>\n         <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\n     </div>\n\n     <div className={s.item}>\n         <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\n     </div>\n </nav>\n\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport axios from \"axios\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {ProfileType, setUserProfile} from \"../../redux/profileReducer\";\nimport {Navbar} from \"./Navbar\";\n\nclass NavbarContainer extends React.Component<PropsType> {\n\n    componentDidMount(): void {\n\n        let userId = this.props.userId\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId, {withCredentials: true})\n            .then(response => {\n                this.props.setUserProfile(response.data)\n            })\n    }\n    render(): React.ReactNode {\n        return <Navbar userId={this.props.userId}/>\n    }\n}\n\ntype mapStatePropsType = {\n    isAuth: boolean\n    userId: string | null\n}\ntype mapDispatchPropsType = {\n    setUserProfile: (profile: ProfileType | null) => void\n}\ntype PropsType = mapStatePropsType & mapDispatchPropsType\n\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        userId: state.auth.userId\n    }\n}\n\n\nexport default connect(mapStateToProps, {setUserProfile})(NavbarContainer)","import React, {Suspense} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"./redux/redux-store\";\nimport MessagesContainer from \"./components/Messages/MessagesContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport NavbarContainer from \"./components/NavBar/NavbarContainer\";\nimport {Preloader} from \"./common/Preloader/Preloader\";\nimport './App.css';\n\nconst FriendsContainer = React.lazy(() => import(\"./components/Friends/FriendsContainer\"))\nconst Video = React.lazy(() => import(\"./components/Video/Video\"))\nconst Music = React.lazy(() => import(\"./components/Music/Music\"))\n\nexport const PATH = {\n    PROFILE: '/profile/',\n    MESSAGES: '/messages/',\n    FRIENDS: '/friends/',\n    MUSIC: '/music/',\n    VIDEO: '/video/',\n    LOGIN: '/login/',\n}\n\ntype AppPropsType = {\n    initialized: boolean\n    initializeApp: () => void\n}\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) return <Preloader/>\n\n        return (\n\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <NavbarContainer/>\n                <div className=\"app-wrapper-content\">\n                    <Suspense fallback={<Preloader/>}>\n                        <Switch>\n                            <Route path='/' exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                            <Route path={PATH.PROFILE + ':userId?'} render={() => <ProfileContainer/>}/>\n                            <Route path={PATH.MESSAGES} render={() => <MessagesContainer/>}/>\n                            <Route path={PATH.FRIENDS} render={() => <FriendsContainer/>}/>\n                            <Route path={PATH.MUSIC} render={() => <Music/>}/>\n                            <Route path={PATH.VIDEO} render={() => <Video/>}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </div>\n\n        );\n    }\n}\n\ntype mapStatePropsType = {\n    initialized: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nconst AppContainer = connect(mapStateToProps, {initializeApp})(App)\n\nconst MainApp = () => {\n\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default MainApp;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3Zs83\",\"item\":\"Navbar_item__3rAcO\",\"active\":\"Navbar_active__1Oq7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"UserItem_userItem__2jm27\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__2XZEt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createPosts\":\"Profile_createPosts__1AIvx\",\"allPosts\":\"Profile_allPosts__56LnY\",\"about\":\"Profile_about__2uuBv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__3rNhZ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport MainApp from \"./App\";\nimport './index.css';\n\n\nReactDOM.render(\n        <React.StrictMode>\n            <MainApp/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}